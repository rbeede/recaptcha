<?php
// anti-recaptcha v0.1 (c)opyleft 2010 http://wegeneredv.de/arc ***************
// ****************************************************************************
$contrast=128;
$scaling_factor=2;
$maxslope=-1;
$mid_exponential_smoothing_factor=0.2;
$vector_exponential_smoothing_factor=0.001;
$h2qx_commandline='hq2x.exe contrast.bmp resized.bmp';
$vietocr_commandline='VietOCR.exe out.jpg output';
$source_img=imagecreatefromjpeg("input.jpg");
// function imagecreatefrombmp ************************************************
// ****************************************************************************
// save Bitmap-File with GD library
// written by mgutt of http://www.programmierer-forum.de/function-imagecreatefrombmp-laeuft-mit-allen-bitraten-t143137.htm
// based on the function by DHKold of http://www.php.net/manual/de/function.imagecreate.php#53879
if (!function_exists('imagecreatefrombmp')) { function imagecreatefrombmp($filename) {
    // version 1.00
    if (!($fh = fopen($filename, 'rb'))) {
        trigger_error('imagecreatefrombmp: Can not open ' . $filename, E_USER_WARNING);
        return false;
    }
    // read file header
    $meta = unpack('vtype/Vfilesize/Vreserved/Voffset', fread($fh, 14));
    // check for bitmap
    if ($meta['type'] != 19778) {
        trigger_error('imagecreatefrombmp: ' . $filename . ' is not a bitmap!', E_USER_WARNING);
        return false;
    }
    // read image header
    $meta += unpack('Vheadersize/Vwidth/Vheight/vplanes/vbits/Vcompression/Vimagesize/Vxres/Vyres/Vcolors/Vimportant', fread($fh, 40));
    // read additional 16bit header
    if ($meta['bits'] == 16) {
        $meta += unpack('VrMask/VgMask/VbMask', fread($fh, 12));
    }
    // set bytes and padding
    $meta['bytes'] = $meta['bits'] / 8;
    $meta['decal'] = 4 - (4 * (($meta['width'] * $meta['bytes'] / 4)- floor($meta['width'] * $meta['bytes'] / 4)));
    if ($meta['decal'] == 4) {
        $meta['decal'] = 0;
    }
    // obtain imagesize
    if ($meta['imagesize'] < 1) {
        $meta['imagesize'] = $meta['filesize'] - $meta['offset'];
        // in rare cases filesize is equal to offset so we need to read physical size
        if ($meta['imagesize'] < 1) {
            $meta['imagesize'] = @filesize($filename) - $meta['offset'];
            if ($meta['imagesize'] < 1) {
                trigger_error('imagecreatefrombmp: Can not obtain filesize of ' . $filename . '!', E_USER_WARNING);
                return false;
            }
        }
    }
    // calculate colors
    $meta['colors'] = !$meta['colors'] ? pow(2, $meta['bits']) : $meta['colors'];
    // read color palette
    $palette = array();
    if ($meta['bits'] < 16) {
        $palette = unpack('l' . $meta['colors'], fread($fh, $meta['colors'] * 4));
        // in rare cases the color value is signed
        if ($palette[1] < 0) {
            foreach ($palette as $i => $color) {
                $palette[$i] = $color + 16777216;
            }
        }
    }
    // create gd image
    $im = imagecreatetruecolor($meta['width'], $meta['height']);
    $data = fread($fh, $meta['imagesize']);
    $p = 0;
    $vide = chr(0);
    $y = $meta['height'] - 1;
    $error = 'imagecreatefrombmp: ' . $filename . ' has not enough data!';
    // loop through the image data beginning with the lower left corner
    while ($y >= 0) {
        $x = 0;
        while ($x < $meta['width']) {
            switch ($meta['bits']) {
                case 32:
                case 24:
                    if (!($part = substr($data, $p, 3))) {
                        trigger_error($error, E_USER_WARNING);
                        return $im;
                    }
                    $color = unpack('V', $part . $vide);
                    break;
                case 16:
                    if (!($part = substr($data, $p, 2))) {
                        trigger_error($error, E_USER_WARNING);
                        return $im;
                    }
                    $color = unpack('v', $part);
                    $color[1] = (($color[1] & 0xf800) >> 8) * 65536 + (($color[1] & 0x07e0) >> 3) * 256 + (($color[1] & 0x001f) << 3);
                    break;
                case 8:
                    $color = unpack('n', $vide . substr($data, $p, 1));
                    $color[1] = $palette[ $color[1] + 1 ];
                    break;
                case 4:
                    $color = unpack('n', $vide . substr($data, floor($p), 1));
                    $color[1] = ($p * 2) % 2 == 0 ? $color[1] >> 4 : $color[1] & 0x0F;
                    $color[1] = $palette[ $color[1] + 1 ];
                    break;
                case 1:
                    $color = unpack('n', $vide . substr($data, floor($p), 1));
                    switch (($p * 8) % 8) {
                        case 0:
                            $color[1] = $color[1] >> 7;
                            break;
                        case 1:
                            $color[1] = ($color[1] & 0x40) >> 6;
                            break;
                        case 2:
                            $color[1] = ($color[1] & 0x20) >> 5;
                            break;
                        case 3:
                            $color[1] = ($color[1] & 0x10) >> 4;
                            break;
                        case 4:
                            $color[1] = ($color[1] & 0x8) >> 3;
                            break;
                        case 5:
                            $color[1] = ($color[1] & 0x4) >> 2;
                            break;
                        case 6:
                            $color[1] = ($color[1] & 0x2) >> 1;
                            break;
                        case 7:
                            $color[1] = ($color[1] & 0x1);
                            break;
                    }
                    $color[1] = $palette[ $color[1] + 1 ];
                    break;
                default:
                    trigger_error('imagecreatefrombmp: ' . $filename . ' has ' . $meta['bits'] . ' bits and this is not supported!', E_USER_WARNING);
                    return false;
            }
            imagesetpixel($im, $x, $y, $color[1]);
            $x++;
            $p += $meta['bytes'];
        }
        $y--;
        $p += $meta['decal'];
    }
    fclose($fh);
    return $im;
}}
// function imagebmp **********************************************************
// ****************************************************************************
// create Bitmap-File with GD library
// written by mgutt of http://www.programmiererforum.de/imagebmp-gute-funktion-gefunden-t143716.htm
// based on the function by legend(legendsky@hotmail.com) of http://www.ugia.cn/?p=96
function imagebmp($im, $filename='', $bit=24, $compression=0) {
    if (!in_array($bit, array(1, 4, 8, 16, 24, 32))) {
        $bit = 24;
    }
    else if ($bit == 32) {
        $bit = 24;
    }
    $bits = pow(2, $bit);
    imagetruecolortopalette($im, true, $bits);
    $width = imagesx($im);
    $height = imagesy($im);
    $colors_num = imagecolorstotal($im);
    $rgb_quad = ''; 
    if ($bit <= 8) {
        for ($i = 0; $i < $colors_num; $i++) {
            $colors = imagecolorsforindex($im, $i);
            $rgb_quad .= chr($colors['blue']) . chr($colors['green']) . chr($colors['red']) . "\0";
        }
        $bmp_data = '';
        if ($compression == 0 || $bit < 8) {
            $compression = 0;
            $extra = ''; 
            $padding = 4 - ceil($width / (8 / $bit)) % 4;
            if ($padding % 4 != 0) {
                $extra = str_repeat("\0", $padding); 
            }
            for ($j = $height - 1; $j >= 0; $j --) {
                $i = 0;
                while ($i < $width) {
                    $bin = 0;
                    $limit = $width - $i < 8 / $bit ? (8 / $bit - $width + $i) * $bit : 0;
                    for ($k = 8 - $bit; $k >= $limit; $k -= $bit) {
                        $index = imagecolorat($im, $i, $j);
                        $bin |= $index << $k;
                        $i++;
                    }
                    $bmp_data .= chr($bin);
                }
                $bmp_data .= $extra;
            }
        }
        // RLE8
        else if ($compression == 1 && $bit == 8) {
            for ($j = $height - 1; $j >= 0; $j--) {
                $last_index = "\0";
                $same_num = 0;
                for ($i = 0; $i <= $width; $i++) {
                    $index = imagecolorat($im, $i, $j);
                    if ($index !== $last_index || $same_num > 255) {
                        if ($same_num != 0) {
                            $bmp_data .= chr($same_num) . chr($last_index);
                        }
                        $last_index = $index;
                        $same_num = 1;
                    }
                    else {
                        $same_num++;
                    }
                }
                $bmp_data .= "\0\0";
            }
            $bmp_data .= "\0\1";
        }
        $size_quad = strlen($rgb_quad);
        $size_data = strlen($bmp_data);
    }
    else {
        $extra = '';
        $padding = 4 - ($width * ($bit / 8)) % 4;
        if ($padding % 4 != 0) {
            $extra = str_repeat("\0", $padding);
        }
        $bmp_data = '';
        for ($j = $height - 1; $j >= 0; $j--) {
            for ($i = 0; $i < $width; $i++) {
                $index  = imagecolorat($im, $i, $j);
                $colors = imagecolorsforindex($im, $index);
                if ($bit == 16) {
                    $bin = 0 << $bit;
                    $bin |= ($colors['red'] >> 3) << 10;
                    $bin |= ($colors['green'] >> 3) << 5;
                    $bin |= $colors['blue'] >> 3;
                    $bmp_data .= pack("v", $bin);
                }
                else {
                    $bmp_data .= pack("c*", $colors['blue'], $colors['green'], $colors['red']);
                }
            }
            $bmp_data .= $extra;
        }
        $size_quad = 0;
        $size_data = strlen($bmp_data);
        $colors_num = 0;
    }
    $file_header = 'BM' . pack('V3', 54 + $size_quad + $size_data, 0, 54 + $size_quad);
    $info_header = pack('V3v2V*', 0x28, $width, $height, 1, $bit, $compression, $size_data, 0, 0, $colors_num, 0);
    if ($filename != '') {
        $fp = fopen($filename, 'wb');
        fwrite($fp, $file_header . $info_header . $rgb_quad . $bmp_data);
        fclose($fp);
        return true;
    }
    echo $file_header . $info_header. $rgb_quad . $bmp_data;
    return true;
}
// contrast *******************************************************************
// ****************************************************************************
$height=imagesy($source_img);
$width=imagesx($source_img);
for($x=0;$x<$width;$x++){
    for($y=0;$y<$height;$y++){
        $rgb=imagecolorat($source_img,$x,$y);
        $r=($rgb>>16)&0xFF;
        $g=($rgb>>8)&0xFF;
        $b=$rgb&0xFF;
        if(($r>$contrast)&&($r>$contrast)&&($r>$contrast)){
            imagesetpixel($source_img,$x,$y,16777215);
        }else{
            imagesetpixel($source_img,$x,$y,0);
        }
    }
}
imagebmp($source_img,"contrast.bmp");
// resize image ***************************************************************
// ****************************************************************************
$h2qx_output=shell_exec($h2qx_commandline);
$img=imagecreatefrombmp('resized.bmp');
$height=imagesy($img);
$width=imagesx($img);
// reaglignment ***************************************************************
// ****************************************************************************
$temp=@imagecreatetruecolor($width,$height) or die('Cannot Initialize new GD image stream');
for($x=0;$x<$width;$x++){
    for($y=0;$y<$height;$y++){
        imagesetpixel($temp,$x,$y,16777215);
    }
}
// calculate top and bottom ***************************************************
$top=null;
$bottom=null;
for($x=1;$x<$width-1;$x++){
    for($y=0;$y<$height;$y++){
        $c=imagecolorat($img,$x,$y);
        if($c==0){
            $top[$x]=$y;
            break;
        }
    }
    for($y=$height-1;$y>0;$y--){
        $c=imagecolorat($img,$x,$y);
        if($c==0){
            $bottom[$x]=$y;
            break;
        }
    }
}
// calculate mid and vector ***************************************************
$mid=null;
$mid_1stpass=null;
$mid_2ndpass=null;
$vector=null;
$vector_1stpass=null;
$vector_2ndpass=null;
for($x=0;$x<$width;$x++){
    if($bottom[$x]-$top[$x]==0){
        $mid_1stpass[$x]=abs($height/2);
        $vector_1stpass[$x]=0;
    }else{
        $mid_1stpass[$x]=abs((1-$mid_exponential_smoothing_factor)*$mid_1stpass[$x-1]+$mid_exponential_smoothing_factor*(($top[$x]+$bottom[$x])/2));
        $vector_1stpass[$x]=abs((1-$vector_exponential_smoothing_factor)*$mid_1stpass[$x-1]+$vector_exponential_smoothing_factor*(($top[$x]+$bottom[$x])/2));

    }
}
for($x=$width-1;$x>=0;$x--){
    if($bottom[$x]-$top[$x]==0){
        $mid_2ndpass[$x]=abs($height/2);
        $vector_2ndpass[$x]=0;
    }else{
        $mid_2ndpass[$x]=abs((1-$mid_exponential_smoothing_factor)*$mid_2ndpass[$x+1]+$mid_exponential_smoothing_factor*(($top[$x]+$bottom[$x])/2));
        $vector_2ndpass[$x]=abs((1-$vector_exponential_smoothing_factor)*$mid_2ndpass[$x+1]+$vector_exponential_smoothing_factor*(($top[$x]+$bottom[$x])/2));
    }
}
for($x=0;$x<=$width;$x++){
    $mid[$x]=(($mid_1stpass[$x]+$mid_2ndpass[$x])/2);
    $vector[$x]=(($vector_1stpass[$x]+$vector_2ndpass[$x])/2);
    $vector[$x]=(($height/2)-($vector[$x]));
}
// calculate slope ************************************************************
$slope[0]=0;
$slope[$width-1]=0;
for($x=1;$x<$width-1;$x++){
    $slope[$x]=$mid[$x]-(($mid[$x+1]+$mid[$x-1])/2);
    if($slope[$x]>abs($max_slope)){$slope[$x]=abs($max_slope);}
    if($slope[$x]<$max_slope){$slope[$x]=$max_slope;}
}
// remove distortion **********************************************************
for($x=0;$x<$width;$x++){
    $slopecount=$x;
    $slopecount=$slopecount+$slope[$x];
    if($bottom[$x]-$top[$x]>0){
        for($y=floor($mid[$x]);$y<$height;$y++){
            if($y<=$bottom[$x]){
                $c=imagecolorat($img,$slopecount,$y);
                imagesetpixel($temp,$x,$y+$vector[$x],$c);
            }
        }
        for($y=floor($mid[$x])-1;$y>0;$y--){
            if($y>=$top[$x]){
                $c=imagecolorat($img,$slopecount,$y);
                imagesetpixel($temp,$x,$y+$vector[$x],$c);
            }
        }
    }
}
// output to ocr **************************************************************
//*****************************************************************************
imagejpeg($temp,"out.jpg");
imagedestroy($temp);
imagedestroy($img);
$vietocr_output=shell_exec($vietocr_commandline);
unlink('resized.bmp');
unlink('out.jpg');
unlink('contrast.bmp');
?>